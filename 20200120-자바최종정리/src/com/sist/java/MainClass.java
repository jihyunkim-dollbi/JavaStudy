package com.sist.java;
/*
 * <1>데이터저장
 * =======
 * = 변수 : 한개의 데이터를 저장하는 공간!
 *   === 
 *   데이터형
 *   	1) 기본형 : 자바언어에서 메모리 크기를 지정
 *   		===
 *   		정수형- byte, short, int, long
 *   		실수형- float, double
 *   		문자형- char
 *   		논리형- boolean	
 *   				==> 형변환
 *   					byte < char, short < int < long < float < double
 *   					====   ===========   ===   ====   =====   ======
 *   					 1         2          4      8       4       8
 *   										============= =============
 *   												 10L    10.5L      
 *   	2) 참조형 : 주소를 저장한 다음에 데이터를 참조하는 형식 : 배열, 클래스
 *			===
 *				==============
 *					참조형
 *					====
 *					주소 ===> 스택(메모리자체 관리) => {}을 벗어나면 삭제
 *					실제 데이터 ===> 힙 => 프로그래머 관리 => 가비지컬렉션
 *
 *			==> 메소드의 두가지 형태
 *				====
 *				리턴형(실행 결과값), 매개변수(사용자요청값)
 *								=====
 *								1) 값만 전송하는 방법 - (Call By Value) : 복사본이 넘어감
 *								2) 주소를 전송하는 방법 -(Call By Reference) :원본(배열, 클래스)
 * 
 * 
 * 			= 배열 : 같은 크기의 데이터를 여러개 저장
 * 					데이터형[] 배열명 = new 데이터형[저장갯수]
 * 					=====스택(주소)  ===========힙(실제값)
 * 					메모리할당			
 * 			= 클래스 : 다른 크기의 데이터를 여러개 저장
 * 					-----------------------------------------------------------------
 * 					1) 데이터만 모아서 관리 => VO, DTO :갭슐화 방식 -변수 PRIVATE(GETTER,SETTER)
 * 					2) 메소드만 모아서 관리 => ~DAO, ~Service, ~ Manager
 * 					-----------------------------------------------------------------웹
 * 					3) 데이터 +메소드 (혼합) ==> 조립식
 * 			
 * 				
 * 	<2>데이터처리
 * 	   =======
 * 		1) 연산자 : 문자(char)가 연산되면 정수형으로 변경됨!, 형변환 (int이하 데이터는 모두 int)
 * 				==> 다른 데이터형이 연산되면-> 큰데이터형으로 변경됨
 * 						int + long => long(자동형변환)
 * 						int + (int)long => int (강제형변환)
 * 						char + int => int (자동형변환)
 * 			단항연산자 : 증감연산자(++, --), 부정연산자(!) => boolean
 * 			이항연산자 : 산술연산자(+,-,*,/) =>0으로 나눌수없다, 정수/정수=정수, % 결과값은 항상 왼쪽의 부호를 따라간다. 
 * 					   비교연산자(==, !=, < , >, <= , >=) : 결과값 =boolean
 * 							==>주로 사용처(if)
 * 					   논리연산자(&&, ||) => 제어문
 * 							==> 효율적인 연산(뒤에것 연산 x)
 * 							==> && (직렬)- 둘다 참이어야 참 - 왼쪽의 결과가 false면 오른쪽 계산 x 
 * 								||(병렬) - 하나만 참이어도 참 - 왼쪽의 결과가 true면 오른쪽 계산 x
 * 					   대입연산자 : 연산자 우선순위가 가낭 낮다(=, -=, += )
 * 			삼항연산자 : if ~ else
 * 					  조건 ? 값1 : 값2
 * 					 true => 값1
 * 					 false =>값2
 * 
 * 		2) 제어문 (흐름)
 * 			= 조건문(if, if~else, if~else if...)
 * 				형식) 
 * 				 1)	if(조건문)  => true이면 {} 안의 문장 수행
 * 					{
 * 						실행문장 => 조건문(부정 연산자, 비교연산자, 논리연산자)
 * 					}
 * 					 => C언어 ==> if(0), if(1) true, false
 * 					
 * 				 2)	 if(조건문)
 * 					{
 * 						실행문장 => true
 * 					}
 * 					else
 * 					{
 * 						실행문장 => false
 * 					}
 * 				 3) 다중조건문 : 단 한개의 실행문장을 수행!!!
 * 				====================================================
 * 				언어마다 => 동작이 동일(형식은 다르다)
 * 				
 * 			= 선택문(switch~ case)
 * 				switch(정수, 문자, 문자열)
 * 				{
 * 					case 값: 실행문장,
 * 							break;
 * 					case 값: 실행문장,
 * 							break;
 * 					case 값: 실행문장,
 * 							break;
 * 					default: 실행문장
 * 							break;
 * 
 * 					+++ case의 값을 중복할 수없다.
 * 				}
 * 
 * 			= 반복문(for, while, do~while)
 * 
 * 					for-each구문 : 출력용
 * 					int[] arr={1,2,3,4}
 * 						==> 변수가 실제 저장된 값을 읽어온다. 일반 for문의 i는 인덱스 값을 읽어온다.					
 * 
 * 					for(데이터형 변수: 배열, 컬렉션)
 * 					{
 * 						실행문장 
 * 					}
 * 
 * 				 	for-each 구문! 배열, 컬렉션일 경우!(웹에서 주로 사용!)
 * 
 * 
 * 			= 반복제어문(break, continue)  ==> while문에서 자주 사용 ==> 무한루프를 줄때..: DataBase, 네트워크
 * 				break - 반복을 중단할때
 * 				continue - 제외(특정부분)
 *  		     
 * 			===========================================================================
 * 
 *  		관련된 명령문, 변수를 묶어서 관리
 *  		명령문 묶기(메소드) ---> 객체지향의 핵심!(재사용이 가능!!)
 *			=======
 *			메소드 : 결과값(리턴형), 요청값(매개변수)			
 *				   ========================
 * 			
 * 
 * 
 * 
 * 			오라클의 저장공간 변수 아니고 테이블(저장되는 여러개의 데이터를 처리하는 공간)
 * 			 
 * 			SQL ->문자열 
 * 				DML: 데이터 조작언어 (프로그래머 사용많음) 1) SELECT- 검색
 * 												 2)	INSERT- 추가 기존에 있으면 INSERT  ==>IF문으로 
 * 												 3)	UPDATE- 수정 기존에 없으면  UPDATE
 * 												 4)	DELETE- 삭제
 * 				** 중요한 것은 응용프로그램에서 어떻게 읽어오느냐가 중요!
 * 
 * 
 * 				DELETE전까지 메모리에서 지워지지 않는다 => 영구적인 저장 장치
 * 	
 * 
 * 													
 * 				DDL: 데이터 정의 언어 - CREATE-
 * 								 - ALTER - 테이블 구조의 수정MODIFY, 삭제DROP, 추가 ADD
 * 								 - DROP  - 테이블 삭제(구조자체삭제)      ==> DBA가 관리(데이터베이스 관리자)
 * 								 - RENAME  - 테이블 네임 변경
 * 								 - TRUNCATE - 테이블은 유지- 안에 자료만 삭제
 * 				DCL: 데이터 제어 언어 - GRANT(권한을 줄때), REVOKE(권한을 뺏음),, 뷰(가상으로 테이블 가져올때),, 시퀀스
 * 			  **TCL: 트랜잭션 언어  -  일괄처리 --> INSERT는 일단 가상공간에 저장===> 여러개 가상저장후 ==> 마지막에 한번에 진짜 저장해라=> COMMIT(저장완료) ==> ROLLBACK(저장취소)  
 * 				자바는 오토커밋 
 * 
 * 				DBF
 * 
 * 				PLSQL => 메소드 SQL
 * 				프로시저(PL)
 * 
 * 				VARCHAR STRING
 * 				NO INT
 * 				DATE
 * 
 * 				SQL> CREATE TABLE board(no NUMBER,name VARCHAR2(34),subject VARCHAR(100)); 100글자까지
 * 					NUMBER(2) 두자리 까지 1~99
 * 					NUMBER ==> 14자리
 * 					NUMBER(5,2) 총 5자리, 소수점이하 2자리까지
 * 
 * 				while문은 row단위로 한줄씩 가져옴...
 * 
 * 
 * 					ERROR at line 1:
					ORA-00907: missing right parenthesis    ==> 콤마나 )를 빠뜨렸을때 
 * 				
 *  				INSERT INTO board VALUES(1,'홍길동','데이터연결');
 *  
 *  				COMMIT;
 * 			
 * 					테이블을 만들고 메소드를 만들어 자바에서 가져오려면
 * 					리턴형과 매개변수는?
 * 
 * 					오라클의 ROW는 한줄이 클래스!!
 * 					리턴형 ==> 6개(6줄) 하나하나가 클래스가 되고 ==> ARRAYLIST로 보내준다. 1개라면 클래스가 리턴형  ==> 무조건 가져올때 단위는 ROW단위 줄단위 줄에 있는 모든것을 가져옴(줄단위로 업데이트, 줄단위 삭제 수정)
 * 					매개변수 ==> 매개변수는 필요없음 ==> 테이블 전체로 넘겨줌 ==> 페이지가 있다면 
 * 					ID를 넣으면 이사람의 한가지 정보를 받기위해 ==> 매개변수 STRING ID , 리턴형 한개의 클래스
 * 					한줄 삭제한다면 => 매개변수는 STRING ID, 리턴형은 VOID (수정, 삭제)
 * 					수정한다면UPDATE => 매개변수는 클래스-> 이름, 아바타, 등등 바꿀수 있기 때문에..
 * 					INSERT => 매개변수는 CLASS! (줄단위) ,  
 * 
 * 
 */
public class MainClass {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
