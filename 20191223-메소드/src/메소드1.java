/*
 *  메소드
 *   = 매개변수 (사용자요청값) => 여러개 가능 =>  행위의 결과를 우리가 받는 것.  
 *                          -> 대부분의 구별을 위해(중복방지) 넘버링 하지만, id와 패스워드는 문자열로 한다.
 *     movieId = 135716
 *     movidDetail(int movieId)
 *     
 *   = 리턴형  => 요청내용에 대한 결과값 전송 ==> only 한개의 결과값 도출됨.
 *             ====================(화변에 나타나는 것이 결과값 => 클래스형 많다. 이유는 데이터형이 다 다르기때문에.) 
 *             기본형, 배열, 클래스
 *    ========================================================================================
 *    
 *    형식) 
 *         리턴형 /  매소드명 / (매개변수, ...) => 선언부
 *         =====
 *         {
 *         
 *             == 구현부
 *              return 결과값     ===> (리턴형 = 결과값)
 *         			   ====					==== 작은 데이터형을 사용할 수 있다. 같거나 작아야 한다.
 *         }
 *   
 *    (리턴형)  int aaa()
 *         {
 *             return(int, char, byte, short) 모두 가능하다. but, 같은 것 권장!
 *         }  
 *            
 *             
 *  		===============
 *  		호출!
 *  		int a = aaa()			
 * 
 * 
 *        리턴형 : 배열
 *        int[] aaa()
 *        {
 *        
 *           return 배열명
 *        }
 *     		
 *     		============
 *     		호출
 *     		int[] arr = aaa()
 * 
 * 
 * 
 *        리턴형 : 클래스
 *        
 *        String aaa()
 *        
 *        {
 *        
 *            return ""
 *        }
 *        ================
 *        호출
 *        
 *         String s = aaa()			
 * 
 * 
 * 		   결과 값이 없는 경우  ==>  ==> return 생략이 되는 경우 ==> 리턴형(VOID일때)
 * 
 * 		  void aaa()
 *			{
 *
 *				return ;
 *           }
 *        ===============
 * 		  호출
 * 			aaa()
 * 
 *  
 *  	===================================================================
 *  
 *  	매개변수가 있는 경우
 *  	int plus(int a, int b)
 *      ===      =============
 *  	{
 *  
 *     		return a+b;
 *  	}
 *  
 *  	 ++  호출
 *   	int a = plus(10,30)
 * 
 * 
 * 		-------------------------
 * 
 * 
 *      제어문은 반드시 패턴이 존재한다.
 *      
 *      배열 혹은 클래스로 잡고 반복문을 돌리면 되니까. 
 * 
 *      같은 데이터형이라면 배열.
 *      다른 데이터형이라면 클래스.
 *      
 *      
 *      
 *      
 * 
 * 
 *     함수는 반드시 저장공간을 만들어야한다.
 *      just void message()
 * 		static(공유공간) 혹은 new(개인?)를 만들어 저장공간 만들고 시작해야한다.
 *      ============== 
 *      메모리공간이 한개 ==> 따라서 전역변수로 받아들이게 되고 모든 결과값이 같게 된다.	
 * 		
 * 		new == > 객체지향 프로그램. 저장공간을 필요한 개수만큼 생성하여 사용하는 것!
 * 		
 * 		<객체지향 >
 * 		캡슐화 - 은닉화
 * 		상속	- 넘겨줌
 * 		변경? - 수정
 * 		
 * 		객체 동시수행기능 - Thread!(실시간) (한 화면에 여러부분이 각각 동시에 동작됨)
 *		네트워크 
 * 
 */
public class 메소드1 {
    static void message()
	{
		System.out.println("*");
		return; // 생략이 되면 => JVM 에서 자동으로 코딩을 해준다.
	}
	
	static int aaa()
	{
		return 10;
		
	}
	
	static double bbb()
	{
		
		return 10.5;
		
	}
	
	static String ccc()
	{
		
		return "hello";
		
		
	}
	
	static int[] ddd() {
		
		int[] arr = {1,2,3,4};
		return arr;
		
	}
	static int eee(int a)
	{
		return a;
		
	}
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub

/*		message(); ==> 이렇게 했을 경우 동작을 안한다. 저장공간을 만들지 않았기 때문에. 아래와 같이 new를 이용해 공간을 만들면 사용가능한다
  	
		메소드1 a = new 메소드1();   ==> new선언하면 저장공간이 생성되어 사용가능!
		a.message();
*/		
		
		
		message();
		int a = aaa();
		double b =bbb();
		String s = ccc();
		int[] arr = ddd();
		int aa = eee(10);
		 //         === >결과값을 넣어달라고 했으니 넣어야한다.
		 // 호출하는 법 ==> 결과값, 매개변수잡기
		
		
		
	}

}
