/*수정 UTF-8
 * 
 * 비트 계산 : 산술연산자로 대채 가능하다.
 * ==
 * 0,1
 * 
 * ===================================
 *               &(and) |(or)   ^(xor):같은비트일때 0, 비트가 다를때 1 값
 *                 *     +
 * ===================================
 * 0 0             0     0        0       
 * ====================================
 * 0 1             0     1        1
 * ====================================
 * 1 0             0     1        1
 * ====================================
 * 1 1             1     2        0
 * ====================================
 * 
 * 
 * 
 * 예)
 * 비트 연산자기 때문에 무조건 2진법으로 바꿔놓고 연산해야한다.
 * 10 & 6
 * 10 ==>   1010    (인트이기때문에 1010 앞에 나머지 0들이 생략된 것이다.)
 * 6   =>   0110 &
 *          ====
 *          0010 => 2
 *          
 *          1010
 *          0110 |
 *          ====
 *          1110  =>14
 *      
 *          1010
 *          0110 ^
 *          ====
 *          1100  => 12
 *          
 *          // 음수표현 
 *          0000 1010
 *          ========= 1의 보수(반전)
 *          1111 0101
 *          ========= 2의 보수(+1해주기)
 *          1111 0101
 *          +       1
 *          =========
 *          1111 0110
 *          
 *          음수가 항상 1이 많다. 항상 플러스 1을 해주기 때문에. 150 -> -151   ,  77 -> -78
 *          
 *          // but ~를 붙여주면 - 값이 나오기 때문에 사용하지 않는다.
 *          ~ : 반전연산자
 *      
 *          
 */


public class 이항연산자_비트연산자 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		// System.out.println(~11);
		// System.out.println(Integer.toBinaryString(-11));
		
		int a=56 & 17;
		int b=56 | 17;
		int c=56 ^ 17;
		
		
		System.out.println("a="+a);
		System.out.println("b="+b);
		System.out.println("c="+c);
		
		
		/*
		 * 
		 * 56 -> 2진법
		 * 
		 * 32 16 8 0 0 0
		 * 
		 *--- 111000
		 * 
		 * 17 
		 * 
		 * 16 0 0 1
		 * 
		 * -- 10001
		 * 
		 * 111000
		 * 010001  &
		 * =======
		 * 010000   -> 16
		 * 
		 * 111000
		 * 010001  |
		 * ========
		 * 111001     -> 57
		 * 
		 * 111000
		 * 010001  ^
		 * ========
		 * 101001    -> 41
		 * 
		 * 
		 */
		
		
		
		
	}

}
